#!/bin/zsh
# シェルスクリプトでもインタラクティブシェルでも必要な設定を書く

#--------------------------------------------------------------
#               Linux Configuration
#--------------------------------------------------------------


# -をつけると、左側の環境変数が指定されていた場合はそちらを優先する
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:=$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:=$HOME/.cache}"

export PAGER=less

if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

#--------------------------------------------------------------
#               Zsh Configuration
#--------------------------------------------------------------

export Z_DOT_DIR=$HOME
export Z_HOME_DIR=${XDG_CONFIG_HOME}/zsh
export Z_RC_DIR=$Z_HOME_DIR/rc
export Z_DATA_DIR=${Z_HOME_DIR}/

# /etc/zprofile を読み込まない
# setopt no_global_rcs

if [ -f "$Z_DOT_DIR/.zshenv.local" ]; then
    source "$Z_DOT_DIR/.zshenv.local"
fi

#--------------------------------------------------------------
#               Third-party Software Configuration
#--------------------------------------------------------------

if type brew &>/dev/null; then
    export PATH="$PATH:/opt/homebrew/opt/node@20/bin"
    export LDFLAGS="-L/opt/homebrew/opt/node@20/lib"
    export CPPFLAGS="-I/opt/homebrew/opt/node@20/include"
fi


if type clang-15 > /dev/null 2>&1; then
export CC=/usr/bin/clang-15
export CXX=/usr/bin/clang++-15
fi
export PATH=$HOME/.robotech/bin:$PATH

# gcm core
export GPG_TTY=$(tty)

if type vmd > /dev/null 2>&1; then
    export PATH=$PATH:"/usr/local/lib/vmd/plugins/LINUXAMD64/bin/catdcd5.2"
fi

# direnv
eval "$(direnv hook zsh)"

# conda
if [[ -e "$HOME/anaconda3" ]]; then
    source ${HOME}/anaconda3/etc/profile.d/conda.sh
fi

# nix
if [ -e /home/glands/.nix-profile/etc/profile.d/nix.sh ]; then
    . /home/glands/.nix-profile/etc/profile.d/nix.sh
fi

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


## poetry + direnv
#layout_poetry() {
#    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
#    if [[ ! -f "$PYPROJECT_TOML" ]]; then
#        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
#        poetry init
#    fi
#
#    VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
#
#    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
#        log_status "No virtual environment exists. Executing \`poetry install\` to create one."    
#        poetry install
#        VIRTUAL_ENV=$(poetry env info --path)
#    fi
#
#    export PATH="$PATH:$VIRTUAL_ENV/bin"
#    export POETRY_ACTIVE=1
#    export VIRTUAL_ENV
#}
